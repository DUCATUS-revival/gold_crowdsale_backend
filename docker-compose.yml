version: "3.8"
services:
  db:
    container_name: db
    image: postgres:13.4
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./.docker/postgres-data:/var/lib/postgresql/data
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8-management-alpine
    restart: unless-stopped
    env_file: .env
  web:
    container_name: web
    restart: unless-stopped
    image: ghcr.io/ducatus-revival/gold_crowdsale_backend:master
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "${DJANGO_PORT}:8000"
    depends_on:
      - db
    volumes:
      - .:/code
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
  scanner:
    container_name: scanner
    restart: unless-stopped
    image: ghcr.io/ducatus-revival/gold_crowdsale_backend:master
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      - db
      - rabbitmq
    volumes:
      - ./scanner/settings:/code/scanner/settings
      - ./scanner/block_numbers:/code/scanner/block_numbers
    command: bash -c './wait-for-it.sh -t 60 rabbitmq:5672 -- python scanner/main.py'
  receiver:
    container_name: receiver
    restart: unless-stopped
    image: ghcr.io/ducatus-revival/gold_crowdsale_backend:master
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      - db
      - rabbitmq
    command: bash -c './wait-for-it.sh -t 60 rabbitmq:5672 -- python receiver.py'
  dramatiq:
    container_name: dramatiq
    restart: unless-stopped
    image: ghcr.io/ducatus-revival/gold_crowdsale_backend:master
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - db
      - rabbitmq
    command: bash -c './wait-for-it.sh -t 60 rabbitmq:5672 -- python manage.py rundramatiq'
  scheduler:
    container_name: scheduler
    restart: unless-stopped
    image: ghcr.io/ducatus-revival/gold_crowdsale_backend:master
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
      - rabbitmq
    command: bash -c './wait-for-it.sh -t 60 rabbitmq:5672 -- python manage.py run_scheduler'

  elasticsearch:
    container_name: elasticsearch
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.2.0"
    user: "1000"
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "discovery.type=single-node"
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - ./.docker/elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    image: "docker.elastic.co/kibana/kibana:7.2.0"
    ports:
      - "${KIBANA_PORT}:5601"

  filebeat:
    container_name: filebeat
    image: "docker.elastic.co/beats/filebeat:7.2.0"
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock